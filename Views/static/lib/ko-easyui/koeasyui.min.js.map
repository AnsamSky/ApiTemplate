{"version":3,"file":"koeasyui.min.js","sources":["../src/generateOption.ts","../src/basecomp.ts","../src/utils.ts","../src/generates/baseEasyuiComp.ts","../src/generates/koeasyuimessager.ts","../src/generates/kodialogs.ts","../src/generates/easyuiHelper.ts","../src/generates/optionAndMethodsRelation.ts","../src/generates/depends.ts","../src/methodExceuteProvider/depcheckExecute.ts","../src/methodExceuteProvider/executeProvider.ts","../src/defaultGenerate.ts","../src/generates/extendbind.ts","../src/generates/easyuiGenerate.ts","../src/generates/EasyuiHelper.ts","../src/generateFactory.ts","../src/generates/index.ts","../src/loader.ts","../src/kocomponents.ts","../src/main.ts"],"sourcesContent":["\r\n/**\r\n * 生成器的配置项\r\n */\r\nexport class GenerateOption{\r\n    public ko:KnockoutStatic;\r\n    public jquery:JQueryStatic;\r\n    constructor(ko:KnockoutStatic){\r\n        this.ko = ko;\r\n        this.jquery = $;\r\n    }\r\n}","import {COMPTYPE} from './utils';\r\n\r\n/**\r\n * 组件基类\r\n */\r\nexport abstract class BaseComp{\r\n    public name:string;\r\n    public type: COMPTYPE;\r\n    constructor(type:COMPTYPE){\r\n        this.type = type;\r\n    }\r\n    /**\r\n     * 绘制组件\r\n     * @param options 配置参数\r\n     */\r\n    public abstract paint(options:any);\r\n    /**\r\n    * 组件重绘方法\r\n    * @param options 配置参数\r\n    */\r\n    public abstract repaint(options:any);\r\n}","\r\n/**\r\n * 返回指定数据不重复的记录\r\n * @param arrays \r\n */\r\nexport function unique(arrays:Array<any>):Array<any>{\r\n    let result = new Array<any>();\r\n    let hash = Object.create({});\r\n    for(let irow = 0; irow < arrays.length; ++ irow){\r\n        let elm = arrays[irow];\r\n        if(!hash[elm]){\r\n            result.push(elm);\r\n            hash[elm] = true;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nexport enum CONSTKEY{\r\n    /**\r\n     * 组件名称前缀\r\n     */\r\n    CompPrefix = 'ko-'\r\n}\r\n\r\n/**\r\n * 根据组件名称获取模板DOM\r\n * @param compName \r\n */\r\nexport function getTemplate(compName:string):string{\r\n    let defaultVaue = '<div></div>';\r\n    let specialValue = {\r\n        'linkbutton': '<a></a>',\r\n        'layout': '<div style=\"height:100%\" ><!-- ko template:{ nodes:$componentTemplateNodes,data:$context.$parent } --><!-- /ko --></div>',\r\n        'dialog': '<div><!-- ko template:{ nodes:$componentTemplateNodes,data:$context.$parent } --><!-- /ko --></div>'\r\n    };\r\n    let val = specialValue[compName];\r\n    if(!val){\r\n        val = defaultVaue;\r\n    }\r\n    return val;\r\n}\r\n\r\n/**\r\n * 将arguments转换为数组\r\n */\r\nexport let convertArgToArray = Array.prototype.slice; \r\n\r\n/**\r\n * 组件类型\r\n */\r\nexport enum COMPTYPE{\r\n    /**\r\n     * easyui实例组件\r\n     */\r\n    easyui = 1,\r\n\r\n    /**\r\n     * 普通组件类型\r\n     */\r\n    norm = 8\r\n}","import {BaseComp} from '../basecomp';\r\nimport { COMPTYPE, CONSTKEY, getTemplate } from '../utils';\r\n\r\n/**\r\n * 所有easyui的基类\r\n */\r\nexport abstract class BaseEasyuiComp extends BaseComp{\r\n    public $dom:JQuery; \r\n    public $parent:JQuery;\r\n    public props:any;\r\n    protected koContext;\r\n    constructor(name, props, componentConfig){\r\n        super(COMPTYPE.easyui);\r\n        this.props = props;\r\n        this.name = name;\r\n        this.$dom = $($(componentConfig.element)[0].firstChild);\r\n        this.$parent = this.$dom.parent();\r\n        let context = ko.contextFor(componentConfig.element);\r\n        $.data(componentConfig.element, context);\r\n        this.koContext = context;\r\n    }\r\n    \r\n    /**\r\n     * 根据参数创建组件的配置对象（核心方法）\r\n     * @param options 配置参数 \r\n     */\r\n    protected createOptionsCore(options){\r\n        let opt = null;\r\n        if(options){\r\n            //viewModel不能转换\r\n            let viewModel = options.viewModel || null;\r\n            opt = ko.toJS(options);\r\n            if(viewModel){\r\n                opt.viewModel = viewModel;\r\n            }\r\n            $.map(opt,(value, key:string)=>{\r\n                if(key.substring(0,2) == 'on' && $.isFunction(value)){\r\n                    //事件\r\n                    opt[key] = value.bind(this);\r\n                }\r\n            });\r\n        } \r\n        return opt;\r\n    }\r\n    /**\r\n     * 根据参数创建组件的配置对象\r\n     * @param options 配置参数 \r\n     */\r\n    protected createOptions(options){\r\n        return this.createOptionsCore(options);\r\n    }\r\n    /**\r\n     * 绘制组件\r\n     * @param options \r\n     */\r\n    public paint(options:any){\r\n        let opt = this.createOptions(options);\r\n        this.$dom[this.name](opt);\r\n    }\r\n    /**\r\n    * 重置组件到初始化状态\r\n    * @param options 配置项\r\n    */\r\n    public resetComp(options:any){\r\n        let $parent = this.$dom.closest(`${CONSTKEY.CompPrefix}${this.name}`);\r\n        if($parent.length == 0){\r\n            $parent = this.$parent;\r\n        }\r\n\r\n        //@ts-ignore\r\n        this.destroy && this.destroy(this);\r\n        let $dom = $(getTemplate(this.name));\r\n        $parent.append($dom);\r\n        this.$dom = $dom; \r\n    }\r\n    \r\n}","import { BaseEasyuiComp } from './baseEasyuiComp';\r\nimport { COMPTYPE, CONSTKEY, convertArgToArray } from '../utils';\r\n\r\nexport class EasyuiMessager extends BaseEasyuiComp{ \r\n    constructor(params, componentConfig){ \r\n        super('messager', Object.getOwnPropertyNames($.messager.defaults),  componentConfig); \r\n        this.bindMethods();\r\n    }\r\n    private bindMethods(){\r\n        var keys = this.getMethodKeys();\r\n        $.map(keys, key => {\r\n            this[key] = function(){\r\n                let args = convertArgToArray.call(arguments);\r\n                $.messager[key].apply($.messager, args);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取方法的Key数据\r\n     */\r\n    private getMethodKeys():Array<string>{\r\n        let methodKeys = new Array<string>();\r\n        $.map(Object.getOwnPropertyNames($.messager), (key)=>{\r\n            if(key != 'defaults'){\r\n                methodKeys.push(key);\r\n            }\r\n        });\r\n        return methodKeys;\r\n    }\r\n    public paint(options:any){\r\n        let opts = this.createOptions(options);\r\n        $.extend($.messager.defaults, opts);\r\n    }\r\n    public repaint(options: any) {  \r\n        this.paint(options);\r\n    }\r\n}   ","import { BaseComp } from '../basecomp';\r\nimport { COMPTYPE, CONSTKEY, convertArgToArray } from '../utils';\r\n\r\n/**\r\n * 基于easyui's dialog的复式弹出窗口组件\r\n * modify: 2018-09-19 sam dargon add $key， 用于外界获取实例化的对话框\r\n */\r\nexport class EasyuiDialogs extends BaseComp {\r\n    public paint(options: any) { \r\n    }\r\n    public list:KnockoutObservableArray<any>;\r\n    public bindContext:any;\r\n    constructor(params, componentConfig){\r\n        super(COMPTYPE.norm);\r\n        this.name = 'dialogs';\r\n        this.bindContext = ko.contextFor(componentConfig.element);\r\n        this.list = ko.observableArray(); \r\n    }\r\n    public repaint(options: any) {\r\n    }\r\n    /**\r\n     * 添加弹出窗口\r\n     * @param params \r\n     */\r\n    public addDialog(params){\r\n        let options = params || {};\r\n        let that = this;\r\n        let key = 'dialogs_' + ko.unwrap(this.list).length;\r\n        let funClose = options.onClose;\r\n        options.onClose = ((key)=>{ \r\n            return function(){  \r\n                that.removeDialog(key, this.$dom[0]);\r\n                if(funClose){\r\n                    funClose.call(that, key);\r\n                }\r\n            }\r\n        })(key);\r\n        //add: 2018-09-19 sam dargon, remark: set $key, use getContextForDialog in app.\r\n        options.$key = key;\r\n        this.list.push({\r\n            name:'ko-dialog',\r\n            params:{\r\n                options: options\r\n            },\r\n            key: key\r\n        });\r\n    }\r\n    /**\r\n     * 移除已弹出的窗口\r\n     * @param key 需要移除的窗口的编号\r\n     */\r\n    public removeDialog(key:string, dom){\r\n        ko.cleanNode(dom.firstElementChild);\r\n        this.list.remove((item)=>{\r\n            return item.key === key;\r\n        });\r\n    } \r\n    static getTemplate(){\r\n        return '<div data-bind=\"foreach:{data:list}\" ><div data-bind=\"component:$data,attr:{id:(\\'dialogs_\\' + $index())}\" ></div></div>'\r\n    }\r\n}","import {IExecute} from '../methodExceuteProvider';\r\nimport {CONSTKEY, getTemplate, COMPTYPE, convertArgToArray} from '../utils';\r\nimport {BaseEasyuiComp} from './baseEasyuiComp';\r\nimport { ExtendBind } from './extendbind';\r\n \r\nexport  class EasyuiHelper{\r\n    static createEasyui(compName:string, props:Array<string>, methods, execute:IExecute, extendBind:ExtendBind):any{\r\n        let tmpClass = class extends BaseEasyuiComp { \r\n            public $dom:JQuery;\r\n            public params: any;\r\n            constructor(params, componentConfig){ \r\n                super(compName.toLowerCase(), props, componentConfig);\r\n                this.params = params;\r\n                if(!this.params.options){\r\n                    this.params.options = {};\r\n                }\r\n                this.$dom = $($(componentConfig.element)[0].firstChild);\r\n                let that = this;\r\n                //绑定方法，方法还需要继承组件支持的方法的绑定\r\n                $.map(Object.getOwnPropertyNames(methods), index=>{\r\n                    if(!$.isNumeric(index)) return true;\r\n                    let methodName = methods[index]; \r\n                    that[methodName] = function(){\r\n                        //需要加一个拦截机制，用于处理依赖组件的方法（如：combogrid，依赖grid，那么grid的方法怎么执行）\r\n                        let args = convertArgToArray.call(arguments);\r\n                        //传入的参数进行扩展\r\n                        extendBind.extend(that.name, args[0], that.koContext); \r\n                        args.unshift(methodName);\r\n                        return execute.execute(that.name, methodName, that.$dom, args); \r\n                    }; \r\n                }); \r\n            }   \r\n            \r\n            /**\r\n             * 绑定change事件\r\n             */\r\n            private bindChangeEvent(sourceopts, opt:any){ \r\n                \r\n                let changeEvent = false;\r\n                $.map(props,(item, key)=>{\r\n                    if(item == 'onChange'){\r\n                        changeEvent = true;\r\n                        return false;\r\n                    }\r\n                });\r\n                if(sourceopts.value && ko.isObservable(sourceopts.value) && changeEvent){\r\n                    let onChangeFn = opt.onChange;\r\n                    let that = this;\r\n                    opt['onChange'] = function(newValue, oldValue){\r\n                        //modify: 2018-10-10 sam dragon set value, but don't send notification.\r\n                        // and add onChange event.\r\n                        sourceopts.value._latestValue = newValue; \r\n                        onChangeFn && onChangeFn.call(that, newValue, oldValue);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            protected createOptions(options){\r\n                let opt = this.createOptionsCore(options);\r\n                if(options){\r\n                    this.bindChangeEvent(options, opt);\r\n                }    \r\n                extendBind.extend(this.name, opt, this.koContext); \r\n                return opt;\r\n            } \r\n            public repaint(options:any){\r\n                this.resetComp(options);\r\n                this.paint(options);\r\n            }\r\n            public dispose(){\r\n                console.log('dispose ' + this.name);\r\n                //@ts-ignore\r\n                if(this.computedObservable){\r\n                    //@ts-ignore\r\n                    this.computedObservable.dispose();\r\n                }\r\n                if(this.params.options.dispose){\r\n                    this.params.options.dispose.apply(this);\r\n                }else{\r\n                    //@ts-ignore\r\n                    this.destroy && this.destroy();\r\n                }\r\n            }\r\n        };\r\n\r\n        return tmpClass;\r\n    }\r\n}\r\n/**\r\n * 根据dom获取上下文\r\n * @param dom dom节点 \r\n */\r\nexport function getContextFor(dom:HTMLElement){\r\n    let comp = $.data(dom);\r\n    return comp ? comp.$data : null;\r\n}","/**\r\n * 配置与方法的关系\r\n * 确定那些配置的改变，可以通过方法实现\r\n */\r\nexport let relation = {\r\n    tooltip:{\r\n        'content': 'update'\r\n    },\r\n    textbox:{\r\n        'value': 'setValue'\r\n    },\r\n    panel:{\r\n        'title': 'setTitle'\r\n    },\r\n    passwordbox:{\r\n        'value': 'setValue'\r\n    },\r\n    combo:{\r\n        'value': 'setValue'\r\n    },\r\n    combobox:{\r\n        'value': 'setValue',\r\n        'data': 'loadData'\r\n    },\r\n    combotree:{\r\n        'value': 'setValue',\r\n        'data': 'loadData'\r\n    },\r\n    combogrid:{        \r\n        'value': 'setValue',\r\n        'data': 'loadData'\r\n    },\r\n    combotreegrid:{\r\n        'value': 'setValue',\r\n        'data': 'loadData'\r\n    },\r\n    tagbox:{\r\n        'value': 'setValue',\r\n        'data': 'loadData'\r\n    },\r\n    numberbox:{        \r\n        'value': 'setValue'\r\n    },\r\n    datebox:{\r\n        'value': 'setValue'\r\n    },\r\n    datetimebox:{\r\n        'value': 'setValue'\r\n    },\r\n    datetimespinner:{\r\n        'value': 'setValue'\r\n    },\r\n    spinner:{\r\n        'value': 'setValue'\r\n    },\r\n    numberspinner:{\r\n        'value': 'setValue'\r\n    },\r\n    timespinner:{\r\n        'value': 'setValue'\r\n    },\r\n    slider:{\r\n        'value': 'setValue'\r\n    },\r\n    filebox:{\r\n        'value': 'setValue'\r\n    },\r\n    datagrid:{\r\n        'data': 'loadData'\r\n    },\r\n    datalist:{\r\n        'data': 'loadData'\r\n    },\r\n    propertygrid:{\r\n        'data': 'loadData'\r\n    },\r\n    tree:{\r\n        'data': 'loadData'\r\n    },\r\n    treegrid:{\r\n        'data': 'loadData'\r\n    }\r\n}","/**\r\n * easyui控件依赖关系\r\n */\r\nexport let depents = {\r\n    pagination: { dependencies: ['linkbutton'] },\r\n    datagrid: { dependencies: ['panel', 'resizable', 'linkbutton', 'pagination'] },\r\n    treegrid: { dependencies: ['datagrid'] },\r\n    propertygrid: { dependencies: ['datagrid'] },\r\n    datalist: { dependencies: ['datagrid'] },\r\n    window: { dependencies: ['resizable', 'draggable', 'panel'] },\r\n    dialog: { dependencies: ['linkbutton', 'window'] },\r\n    messager: { dependencies: ['linkbutton', 'window', 'progressbar'] },\r\n    layout: { dependencies: ['resizable', 'panel'] },\r\n    tabs: { dependencies: ['panel', 'linkbutton'] },\r\n    menubutton: { dependencies: ['linkbutton', 'menu'] },\r\n    splitbutton: { dependencies: ['menubutton'] },\r\n    accordion: { dependencies: ['panel'] },\r\n    textbox: { dependencies: ['validatebox', 'linkbutton'] },\r\n    filebox: { dependencies: ['textbox'] },\r\n    combo: { dependencies: ['panel', 'textbox'] },\r\n    combobox: { dependencies: ['combo'] },\r\n    combotree: { dependencies: ['combo', 'tree'] },\r\n    combogrid: { dependencies: ['combo', 'datagrid'] },\r\n    combotreegrid: { dependencies: ['combo', 'treegrid'] },\r\n    validatebox: { dependencies: ['tooltip'] },\r\n    numberbox: { dependencies: ['textbox'] },\r\n    searchbox: { dependencies: ['menubutton', 'textbox'] },\r\n    spinner: { dependencies: ['textbox'] },\r\n    numberspinner: { dependencies: ['spinner', 'numberbox'] },\r\n    timespinner: { dependencies: ['spinner'] },\r\n    tree: { dependencies: ['draggable', 'droppable'] },\r\n    datebox: { dependencies: ['calendar', 'combo'] },\r\n    datetimebox: { dependencies: ['datebox', 'timespinner'] },\r\n    slider: { dependencies: ['draggable'] }\r\n}\r\n/**\r\n * 获取依赖项\r\n * @param name \r\n */\r\nexport function getDepend(name:string){\r\n    let deps = depents[name];\r\n    let depret = [];\r\n    if(deps && deps.dependencies){\r\n        $.map(deps.dependencies, d => {\r\n            if(depents[d]){\r\n                depret = depret.concat(getDepend(d));\r\n            }\r\n            depret.push(d);\r\n        });\r\n    }\r\n    return depret;\r\n}\r\n\r\n/**\r\n * 根据组件名、方法名，获取此方法归属组件（因为方法有可能归属于依赖组件）\r\n * @param componentName 组件名\r\n * @param methodName 方法名\r\n * @param jquery jquery对象\r\n */\r\nexport function getDependNameOfComponent(componentName:string, methodName:string, argdeps, jquery:JQueryStatic):string{\r\n    let methods = jquery.fn[componentName].methods;\r\n    let result = null;\r\n    $.map(Object.getOwnPropertyNames(methods), m => {\r\n        if(m == methodName ){\r\n            result = componentName;\r\n            return false;\r\n        }\r\n    });\r\n    if(!result){\r\n        let deps = depents[componentName] ? depents[componentName].dependencies : null; \r\n        if(deps){\r\n            $.map(deps, d => {\r\n                if(!result){\r\n                    let tmp = getDependNameOfComponent(d, methodName, argdeps, jquery); \r\n\r\n                    if( tmp && argdeps){ //如果查询到的组件名在依赖列表内，可使用\r\n                        let depkeys = Object.getOwnPropertyNames(argdeps).join(',');\r\n                        if(depkeys.indexOf(tmp) >=0){\r\n                            result = tmp;\r\n                        }\r\n                    }\r\n                }\r\n            }); \r\n        }\r\n    }\r\n    return result;\r\n}","import {getDependNameOfComponent} from '../generates/depends' ;\r\nimport {IExecute} from './iexecute';\r\n\r\n\r\n/**\r\n * 获取可执行方法（带依赖检测）\r\n */\r\nexport class DepCheckExecute implements IExecute {\r\n\r\n    public jquery:JQueryStatic;\r\n    /**\r\n     * 执行依赖方法时，需要获取依赖组件的列表\r\n     */\r\n    public deps:any;\r\n    /**\r\n     * 不支持destroy方法的组件\r\n     */\r\n    public noSupportDestroy:Array<string>;\r\n\r\n    constructor(jquery:JQueryStatic){\r\n        this.jquery = jquery;\r\n        this.deps={\r\n            'combo':{\r\n                'textbox': 'textbox'\r\n            },\r\n            'combogrid': {\r\n                'datagrid': 'grid'\r\n            },\r\n            'combotreegrid':{\r\n                'treegrid': 'grid'\r\n            },\r\n            'combotree':{\r\n                'tree': 'tree'\r\n            },\r\n            'datagrid':{\r\n                'panel': 'getPanel',\r\n                'pagination': 'getPager'\r\n            },\r\n            'propertygrid':{\r\n                'panel': 'getPanel'\r\n            },\r\n            'datetimebox':{\r\n                'spinner': 'spinner'\r\n            },\r\n            'datebox':{\r\n                'calendar': 'calendar'\r\n            },\r\n            'searchbox':{\r\n                'textbox': 'textbox',\r\n                'menu': 'menu'\r\n            },\r\n            'datalist':{                \r\n                'panel': 'getPanel',\r\n                'pagination': 'getPager'\r\n            }\r\n        }\r\n        this.noSupportDestroy= ['layout', 'tabs'];\r\n    }\r\n\r\n    /**\r\n     * 获取可执行方法（带依赖检测）\r\n     */\r\n    execute(compName: string, methodName: string, $dom:JQuery, args:Array<any>) {\r\n        let findComp = false;\r\n        $.map(this.noSupportDestroy,(item, key)=>{\r\n            if(item == compName){\r\n                findComp = true;\r\n                return false;\r\n            }\r\n        });\r\n        if(methodName == 'destroy' && findComp){\r\n            return;\r\n        }\r\n        //have bug: 如我执行分页的select方法，很有可能会调用linkbutton的select。依赖组件之间有重名方法时，有问题\r\n        let depCompName = getDependNameOfComponent(compName, methodName, this.deps[compName], this.jquery);\r\n        if(depCompName && depCompName != compName && this.deps[compName]){\r\n            //依赖上的\r\n            var depHandler = $dom[compName].apply($dom, [this.deps[compName][depCompName]]);\r\n            let $depDom = this.jquery(depHandler[0]);\r\n            return depHandler[depCompName].apply($depDom, args);\r\n        } \r\n        return $dom[compName].apply($dom, args);  \r\n    }\r\n}","import {IExecute} from './iexecute';\r\nimport {GenerateOption} from '../generateOption';\r\nimport {DepCheckExecute} from './depcheckExecute';\r\n\r\n/**\r\n * 提供获取的可执行的入口\r\n */\r\nexport class ExecuteProivder implements IExecute {\r\n\r\n    public opt:GenerateOption;\r\n    private executes:IExecute;\r\n    constructor(opt:GenerateOption){\r\n        this.opt = opt;\r\n        this.executes = new DepCheckExecute(this.opt.jquery);\r\n    }\r\n\r\n    execute(compName: string, methodName: string, $dom:JQuery, args:Array<any>) {\r\n        return this.executes.execute(compName, methodName, $dom, args);\r\n    }\r\n}","import { IGenerate } from './igenerate';\r\nimport { GenerateOption } from './generateOption';\r\n\r\nexport class DefaultGenerate implements IGenerate {\r\n    public option:GenerateOption;\r\n    constructor(option:GenerateOption){\r\n        this.option = option;\r\n    }\r\n    generate(componentName: string, params: any, viewModel: any) {\r\n        let first = true, that = this;\r\n\r\n\r\n        this._touchMount(componentName, params, viewModel);\r\n        let observableKeys = this._getObservableKeys(params);\r\n\r\n        //配置参数存在，就进行监听\r\n        if(params.options){ \r\n            //监听params的变化变化\r\n            ko.computed(function(){\r\n                let changeOpts = that._getChangeObservable(params,observableKeys,viewModel);\r\n\r\n                if(first){ //如果是初始化执行，后面的业务不用重复执行了\r\n                    first = false;\r\n                    return;\r\n                }\r\n                if(changeOpts.length>0){\r\n                    that._touchPaint(componentName,params,viewModel,changeOpts,function(){                        \r\n                        //引起了组件重绘\r\n                        viewModel.repaint && viewModel.repaint(params.options); \r\n                    });\r\n                }\r\n            });\r\n        }\r\n\r\n        return viewModel;\r\n    }\r\n\r\n     /**\r\n     * 内部方法，获取配置参数(options)上的所有可监控对象的key，首次渲染组件时执行\r\n     * @param params 组件的所有参数\r\n     */\r\n    _getObservableKeys(params:any):Array<string>{\r\n        let keys = new Array<string>();\r\n        let opts = params.options;\r\n        if(!opts) return keys;\r\n        $.map(Object.getOwnPropertyNames(opts),(key)=>{\r\n            let param = opts[key];\r\n            if(ko.isObservable(param)){\r\n                keys.push(key);\r\n            }\r\n        });\r\n        return keys;\r\n    }\r\n\r\n    /**\r\n     * 获取有变更的监控对象列表\r\n     * @param params 配置对象\r\n     * @param observableKeys 可监控的参数列表key\r\n     * @param viewModel 视图数据对象\r\n     * @return \r\n     * {\r\n     *  changeOpts：存在变更的对象列表\r\n     *  reflows：可以使用回流操作来处理的变更列表\r\n     * }\r\n     */\r\n    _getChangeObservable(params:any, observableKeys:Array<string>, viewModel:any):any{\r\n        let opts = params.options; \r\n        let changeOpts = new Array<any>();\r\n        $.map(observableKeys, key => {\r\n            let param = opts[key];\r\n            let tmp = ko.unwrap(param);\r\n            //探测监控对象有变化的属性，区分那些可以用方法进行改变，那些需要重绘\r\n            if(ko.isObservable(param) && param.hasChanged()){\r\n                changeOpts.push(param);\r\n            }\r\n        });\r\n        return changeOpts;\r\n    }\r\n\r\n    /**\r\n     * 触发挂载方法，以及相关勾子\r\n     * @param componentName 组件名称\r\n     * @param params 参数列表\r\n     * @param viewModel 视图数据对象\r\n     */\r\n    _touchMount(componentName:string, params:any, viewModel:any){\r\n        let canPaint = true;\r\n        if(viewModel.beforeMount){//绘制前的勾子\r\n            canPaint = viewModel.beforeMount(params, componentName);\r\n        }\r\n        if(true || canPaint){//阻止子组件的渲染？？？怎么办\r\n            viewModel.paint && viewModel.paint(params.options || {});\r\n            if(viewModel.afterMount){//绘制后的勾子\r\n                viewModel.afterMount(params, componentName);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 触发组件的重绘\r\n     * @param componentName 组件名称\r\n     * @param params 参数列表\r\n     * @param viewModel 视图数据对象\r\n     * @param changeOpts 存在变更的可监控列表\r\n     * @param action beforePaint与afterPaint之间需要执行的动作\r\n     */\r\n    _touchPaint(componentName:string, params:any, viewModel:any, changeOpts:any, action:any){\r\n        let canPaint;\r\n        if(viewModel.beforePaint){\r\n            canPaint = viewModel.beforePaint(params, componentName, changeOpts);\r\n        }\r\n        if(true || canPaint){ \r\n            action && action();\r\n            if(viewModel.afterPaint){\r\n                viewModel.afterPaint(params, componentName);\r\n            }\r\n        }\r\n    }\r\n}","import { GenerateOption } from \"../generateOption\";\r\n\r\n\r\n/**\r\n * 扩展对window, dialog, panel, Layout, tabs, accordion控件内容可绑定ko组件的能力\r\n */\r\nexport class ExtendBind{\r\n    private option;\r\n    private jquery;\r\n    private ko; \r\n    constructor(option:GenerateOption){\r\n        this.option = option;\r\n        this.jquery = option.jquery;\r\n        this.ko = option.ko; \r\n    }\r\n    extend(name, opts,bindContext){\r\n        let eName = this._getEventName(name);\r\n        if(eName){\r\n            this._extendOption(eName, opts, bindContext);\r\n        }\r\n    }\r\n    /**\r\n     * 获取可扩展的事件名称\r\n     */\r\n    _getEventName = function(name){\r\n        let eventName = null;\r\n        switch(name){\r\n            case \"window\":\r\n            case \"dialog\":\r\n            case \"layout\":\r\n            case \"panel\":\r\n            //modify: 2018-10-08 sam dragon remove onAdd in tabs and accordion, and add listen onBeforeOpen in tabs and accordion.\r\n            case \"tabs\":\r\n            case \"accordion\":\r\n                eventName = \"onBeforeOpen\";\r\n                break;\r\n        }\r\n        return eventName;\r\n    }\r\n    /**\r\n     * 将指定的事件扩展为支持ko组件自动绑定的能力\r\n     * @param eName 事件名称\r\n     * @param opts 配置参数\r\n     * @param bindContext ko组件上下文\r\n     */\r\n    _extendOption(eName, opts,bindContext){ \r\n        let that = this;\r\n        if( opts && opts.viewModel){ \r\n            //说明有ko组件需要绑定\r\n            let _orgEvent = opts[eName];\r\n            let childBindContext; //绑定对象的创建\r\n            opts[eName] = function(){\r\n                //modify: 2018-10-08 sam dragon 处理tabs、accordion组件选项切换引起的Bug。\r\n                if(childBindContext){\r\n                    ko.removeNode(this.firstChild);\r\n                    $(this).append(opts.content);\r\n                }                \r\n                //viewModel必须是对象\r\n                childBindContext = bindContext.createChildContext(opts.viewModel,undefined,function(ctx){\r\n                });\r\n                //@ts-ignore\r\n                that.ko.applyBindingsToDescendants(childBindContext,this);//调用者，肯定是组件\r\n                _orgEvent && _orgEvent.apply(childBindContext.$data, arguments); //执行开发者配置的事件\r\n            };\r\n        }\r\n    }\r\n}","///<reference types=\"../../types/easyui\" />\r\n\r\nimport { IGenerate } from '../igenerate';\r\nimport { GenerateOption } from '../generateOption';\r\nimport { EasyuiHelper } from './easyuiHelper';\r\nimport { relation } from './optionAndMethodsRelation';\r\nimport { getDepend } from './depends';\r\nimport { unique, CONSTKEY, getTemplate } from '../utils';\r\nimport { IExecute, ExecuteProivder } from '../methodExceuteProvider'; \r\nimport { DefaultGenerate } from '../defaultGenerate';\r\nimport {ExtendBind} from './extendbind';\r\n\r\nexport class EasyuiGenerate extends DefaultGenerate {\r\n\r\n    /**\r\n     * easyui对象\r\n     */\r\n    public easyui:any;\r\n\r\n    /**\r\n     * jquery对象\r\n     */\r\n    public jquery:JQueryStatic;\r\n\r\n    /**\r\n     * 获取执行方法的提供者\r\n     */\r\n    public executeProvider:IExecute;\r\n\r\n    /**\r\n     * 监听列表\r\n     */\r\n    private computeds:Array<any>;\r\n\r\n    /**\r\n     * 扩展处理\r\n     */\r\n    private extendBind:ExtendBind;\r\n\r\n    constructor(option:GenerateOption){ \r\n        super(option);\r\n        this.jquery = option.jquery;\r\n        this.easyui = this.jquery.parser;\r\n        this.executeProvider = new ExecuteProivder(option);\r\n        this.extendBind=new ExtendBind(option);\r\n        this.registerPlugins();\r\n    }\r\n\r\n    /**\r\n     * 组件easyui的相关组件\r\n     */\r\n    registerPlugins(){\r\n        //fix easyui defaults\r\n        //1. datagrid missing columns, frozenColumns;\r\n        this.jquery.fn.datagrid.defaults.columns = [[]];\r\n        this.jquery.fn.datagrid.defaults.frozenColumns = [[]];\r\n\r\n        //extends panel default event.\r\n        this._extendPanelEvent();\r\n\r\n        let plugins = this.easyui.plugins;\r\n        //动态生成一个function的类\r\n        $.map(plugins, pluginName => {\r\n            let defaults = this.jquery.fn[pluginName].defaults;\r\n            let methods = this.jquery.fn[pluginName].methods;\r\n            let deps = getDepend(pluginName);\r\n            if(defaults){\r\n                //options必须要是独立的，事件（放原型上），方法可以原型链上的\r\n                let props = Object.getOwnPropertyNames(defaults);\r\n                //方法\r\n                let methodKeys = Object.getOwnPropertyNames(methods);\r\n                if(deps){\r\n                    $.map( deps, dep=>{\r\n                        let depMethods = this.jquery.fn[dep].methods;\r\n                        methodKeys = methodKeys.concat(Object.getOwnPropertyNames(depMethods));\r\n                    });\r\n                    methodKeys = unique(methodKeys);\r\n                }\r\n                this.option.ko.components.register(`${CONSTKEY.CompPrefix}${pluginName}`,{\r\n                    template: getTemplate(pluginName),\r\n                    viewModel: EasyuiHelper.createEasyui(pluginName, props, methodKeys, this.executeProvider, this.extendBind)\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    generate(componentName: string, params: any, viewModel: any):any {\r\n        let first = true, that = this;\r\n\r\n        this._touchMount(componentName, params, viewModel);\r\n        //获取监控数据列表\r\n        let observableKeys = this._getObservableKeys(params);\r\n\r\n        //配置参数存在，就进行监听\r\n        if(params.options){ \r\n            //监听params的变化变化\r\n            //@ts-ignore\r\n            viewModel.computedObservable = ko.computed({\r\n                read: function(){\r\n                \r\n                    //todo: 无意义，ko比较的是否判断，是需要传入一个比较的版本号的，每个属性都是有改动\r\n                    let changeObs = that._getChangeObservable(params,observableKeys,viewModel);\r\n    \r\n                    if(first){ //如果是初始化执行，后面的业务不用重复执行了\r\n                        first = false;\r\n                        return;\r\n                    }\r\n                    if(changeObs.changeOpts.length>0){\r\n                        that._touchPaint(componentName, params, viewModel, changeObs,function(){\r\n                            if(changeObs.changeOpts.length == changeObs.reflows.length){//说明配置的改变，可能通过方法操作完成\r\n                                $.map(changeObs.reflows, item=>{\r\n                                    viewModel[item.methodName](item.val);\r\n                                });\r\n                            }else{\r\n                                //引起了组件重绘\r\n                                viewModel.repaint(params.options);\r\n                            }\r\n                        });\r\n                    }\r\n                },\r\n                disposeWhenNodeIsRemoved:true\r\n            });\r\n        }\r\n\r\n        return viewModel;\r\n    }\r\n\r\n    /**\r\n     * 获取有变更的监控对象列表\r\n     * @param params 配置对象\r\n     * @param observableKeys 可监控的参数列表key\r\n     * @param viewModel 视图数据对象\r\n     * @return \r\n     * {\r\n     *  changeOpts：存在变更的对象列表\r\n     *  reflows：可以使用回流操作来处理的变更列表\r\n     * }\r\n     */\r\n    _getChangeObservable(params:any, observableKeys:Array<string>, viewModel:any):any{\r\n        let opts = params.options; \r\n        let changeOpts = new Array<any>();\r\n        let reflows = new Array<any>(); //可以通过方法来进行配置改变的参数\r\n        $.map(observableKeys, key => {\r\n            let param = opts[key];\r\n            let tmp = ko.unwrap(param);\r\n            //探测监控对象有变化的属性，区分那些可以用方法进行改变，那些需要重绘\r\n            if(ko.isObservable(param) && param.hasChanged()){\r\n                changeOpts.push(param);\r\n                if(relation[viewModel.name] && relation[viewModel.name][key]){\r\n                    reflows.push({\r\n                        val: tmp,\r\n                        methodName: relation[viewModel.name][key]\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        return {\r\n            changeOpts: changeOpts,\r\n            reflows: reflows\r\n        }\r\n    }\r\n\r\n    /**\r\n     * modify:2018-06-05 sam dragon, 重写panel的onOpen方法，用于panel内容的组件解析\r\n     * modify:2018-09-30 sam dragon, linkbutton增加destroy方法，用于销毁组件\r\n     */\r\n    _extendPanelEvent(){\r\n        $.fn.panel.defaults.onOpen = function(){\r\n        }\r\n        //@ts-ignore\r\n        $.fn.linkbutton.methods.destroy = function($dom){\r\n            $dom.unbind('.linkbutton');\r\n            $dom.remove();\r\n        }\r\n    }\r\n}","import {IExecute} from '../methodExceuteProvider';\r\nimport {CONSTKEY, getTemplate, COMPTYPE, convertArgToArray} from '../utils';\r\nimport {BaseEasyuiComp} from './baseEasyuiComp';\r\nimport { ExtendBind } from './extendbind';\r\n \r\nexport  class EasyuiHelper{\r\n    static createEasyui(compName:string, props:Array<string>, methods, execute:IExecute, extendBind:ExtendBind):any{\r\n        let tmpClass = class extends BaseEasyuiComp { \r\n            public $dom:JQuery;\r\n            public params: any;\r\n            constructor(params, componentConfig){ \r\n                super(compName.toLowerCase(), props, componentConfig);\r\n                this.params = params;\r\n                if(!this.params.options){\r\n                    this.params.options = {};\r\n                }\r\n                this.$dom = $($(componentConfig.element)[0].firstChild);\r\n                let that = this;\r\n                //绑定方法，方法还需要继承组件支持的方法的绑定\r\n                $.map(Object.getOwnPropertyNames(methods), index=>{\r\n                    if(!$.isNumeric(index)) return true;\r\n                    let methodName = methods[index]; \r\n                    that[methodName] = function(){\r\n                        //需要加一个拦截机制，用于处理依赖组件的方法（如：combogrid，依赖grid，那么grid的方法怎么执行）\r\n                        let args = convertArgToArray.call(arguments);\r\n                        //传入的参数进行扩展\r\n                        extendBind.extend(that.name, args[0], that.koContext); \r\n                        args.unshift(methodName);\r\n                        return execute.execute(that.name, methodName, that.$dom, args); \r\n                    }; \r\n                }); \r\n            }   \r\n            \r\n            /**\r\n             * 绑定change事件\r\n             */\r\n            private bindChangeEvent(sourceopts, opt:any){ \r\n                \r\n                let changeEvent = false;\r\n                $.map(props,(item, key)=>{\r\n                    if(item == 'onChange'){\r\n                        changeEvent = true;\r\n                        return false;\r\n                    }\r\n                });\r\n                if(sourceopts.value && ko.isObservable(sourceopts.value) && changeEvent){\r\n                    let onChangeFn = opt.onChange;\r\n                    let that = this;\r\n                    opt['onChange'] = function(newValue, oldValue){\r\n                        //modify: 2018-10-10 sam dragon set value, but don't send notification.\r\n                        // and add onChange event.\r\n                        sourceopts.value._latestValue = newValue; \r\n                        onChangeFn && onChangeFn.call(that, newValue, oldValue);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            protected createOptions(options){\r\n                let opt = this.createOptionsCore(options);\r\n                if(options){\r\n                    this.bindChangeEvent(options, opt);\r\n                }    \r\n                extendBind.extend(this.name, opt, this.koContext); \r\n                return opt;\r\n            } \r\n            public repaint(options:any){\r\n                this.resetComp(options);\r\n                this.paint(options);\r\n            }\r\n            public dispose(){\r\n                console.log('dispose ' + this.name);\r\n                //@ts-ignore\r\n                if(this.computedObservable){\r\n                    //@ts-ignore\r\n                    this.computedObservable.dispose();\r\n                }\r\n                if(this.params.options.dispose){\r\n                    this.params.options.dispose.apply(this);\r\n                }else{\r\n                    //@ts-ignore\r\n                    this.destroy && this.destroy();\r\n                }\r\n            }\r\n        };\r\n\r\n        return tmpClass;\r\n    }\r\n}\r\n/**\r\n * 根据dom获取上下文\r\n * @param dom dom节点 \r\n */\r\nexport function getContextFor(dom:HTMLElement){\r\n    let comp = $.data(dom);\r\n    return comp ? comp.$data : null;\r\n}","import {IGenerate} from './igenerate';\r\nimport {GenerateOption} from './generateOption';\r\nimport {EasyuiGenerate, use} from './generates';\r\nimport { COMPTYPE } from './utils';\r\nimport { DefaultGenerate } from './defaultGenerate';\r\n\r\n/**\r\n * 生成ko组件，并注册到ko组件对象中\r\n */\r\nexport class GenerateFactory implements IGenerate {\r\n    public option: GenerateOption;\r\n    public generates: any;\r\n    constructor(option:GenerateOption){\r\n        this.option = option;\r\n        this.generates ={\r\n            [COMPTYPE.easyui]: new EasyuiGenerate(this.option),\r\n            [COMPTYPE.norm]: new DefaultGenerate(this.option)\r\n        }\r\n        use(this.option.ko); //引用ko-messager组件\r\n    }\r\n\r\n    generate(componentName: string, params: any, viewModel: any):any {\r\n        let generateHandler = this.generates[viewModel.type || COMPTYPE.norm];\r\n        if(generateHandler){\r\n            return generateHandler.generate(componentName, params, viewModel);\r\n        }\r\n        return viewModel;\r\n    }\r\n}","import { EasyuiMessager } from './koeasyuimessager';\r\nimport { EasyuiDialogs } from './kodialogs';\r\nimport { CONSTKEY } from '../utils';\r\n\r\nexport function use(ko:KnockoutStatic){\r\n    ko.components.register(`${CONSTKEY.CompPrefix}messager`,{\r\n        viewModel:EasyuiMessager,\r\n        template: '<div></div>'\r\n    });\r\n    //dialogs\r\n    ko.components.register(`${CONSTKEY.CompPrefix}dialogs`,{\r\n        viewModel:EasyuiDialogs,\r\n        template:EasyuiDialogs.getTemplate()\r\n    }); \r\n}\r\n\r\nexport * from './easyuiGenerate';\r\nexport { getContextFor } from './EasyuiHelper';\r\nexport { getDependNameOfComponent } from './depends';","import {IGenerate} from './igenerate';\r\n\r\n/**\r\n * ko的自定义loader，用于创建ko-easyui组件的生命周期\r\n */\r\nexport class EasyuiLoader{\r\n    public factory:IGenerate;\r\n    constructor(factory: IGenerate){ \r\n        this.factory = factory;\r\n    }\r\n    getConfig(name:any, callback:any){\r\n        callback(null);\r\n    }\r\n    loadComponent(name:any, componentConfig:any, callback:any){\r\n        callback(null);\r\n    }\r\n    loadTemplate(name:any, templateConfig:any, callback:any){\r\n        //这里做一些视图不显示的控制，在渲染数据后，进行视频的展示\r\n        callback(null);\r\n    }\r\n    loadViewModel(name:any, viewModelConfig:any, callback:any){\r\n        //到这里，视图都是已经呈现好的\r\n        //这里要产生两个生命周期：渲染数据前、渲染数据后，以及一个视图重绘的事件\r\n        var nViewModelConfig = (params, componentConfig) => {\r\n            \r\n            //获取root对象\r\n            let $obj = ko.contextFor(componentConfig.element);\r\n            let $root = $obj.$root;\r\n            let vm = new viewModelConfig(params, componentConfig, $root, $obj.$data); //current $data is parent.\r\n            //激活\r\n            if(vm.activate){\r\n                vm.activate(params,componentConfig);\r\n            }\r\n            let that = this;\r\n            vm.koDescendantsComplete = function(dom){\r\n                //组件绑定完成后的事件\r\n                //写入Context到自定义元素dom上\r\n                $.data(dom, ko.contextFor(dom.firstChild));\r\n                that.factory.generate(name, params, vm); \r\n            }\r\n            return vm;\r\n        }\r\n        callback(nViewModelConfig);\r\n    }\r\n} ","import {BaseComp} from './basecomp';\r\nimport { COMPTYPE } from './utils';\r\n\r\nexport class Components extends BaseComp{\r\n    public comps:KnockoutObservableArray<any>;\r\n    private paramComp:KnockoutObservable<any>;\r\n    constructor(params){\r\n        super(COMPTYPE.norm);\r\n        this.comps = ko.observableArray();\r\n        this.paramComp = params.comp;\r\n        if(this.paramComp){\r\n            this.paramComp.subscribe((nVal)=>{\r\n                let compInfo = {\r\n                    id:0,\r\n                    name:null,\r\n                    params:{},\r\n                    show: ko.observable(false)\r\n                };\r\n                if(typeof nVal == 'string'){\r\n                    compInfo.name = nVal;\r\n                }else{\r\n                    compInfo.name = nVal.name;\r\n                    compInfo.params = nVal.params || {};\r\n                    compInfo.id = nVal.id || 0;\r\n                }\r\n                //@ts-ignore, the first read, execute fun at param in computed.\r\n                compInfo.domId =  ko.computed(function(){\r\n                    return 'components-item' + this.id;\r\n                }, compInfo);\r\n                this._setComp(compInfo);\r\n            }); \r\n        }\r\n    }\r\n    private _setComp(compinfo){\r\n        var comp;\r\n        $.each(ko.unwrap(this.comps), function(i,v){\r\n            v.show(false);\r\n            if(v.name == compinfo.name && v.id == compinfo.id){\r\n                comp = v;\r\n            }\r\n        });\r\n        if(!comp){\r\n            comp = compinfo;\r\n            this.comps.push(comp);\r\n        }\r\n        comp.show(true);\r\n    }\r\n    public paint(options: any) {\r\n\r\n    }    \r\n    public repaint(options: any) {\r\n\r\n    }\r\n    public remove(arg:any){\r\n        var comp;\r\n        let isObj = Object.prototype.toString.call(arg) == '[object String]' ? false : true;\r\n        $.each(ko.unwrap(this.comps), function(i,v){\r\n            //modify: 2019-07-11 sam  remark: arg is object or string\r\n            if( (isObj && arg.name == v.name && arg.id == v.id ) || (!isObj && v.name == arg)){\r\n                comp = v;\r\n            }\r\n        });\r\n        if(comp){\r\n            comp.show(false);\r\n            this.comps.remove(comp);\r\n        }\r\n    }\r\n    public removeAll(){\r\n        this.comps.removeAll();\r\n    }\r\n    static getTemplate(){\r\n        return '<div class=\"components-list\" data-bind=\"foreach:comps\" ><div class=\"components-item\" data-bind=\"component:$data,visible:show,attr:{id:$data.domId}\" ></div></div>'\r\n    }\r\n}","/**\r\n * 主体思路\r\n * 1. 获取所有easyui的组件，以及组件的相关事件、配置参数、方法等\r\n * 2. easyui组件 映射为 ko-easyui组件，新组件名为 ko-easyui原组件名\r\n * 3. 做渲染钩子，建立一个组件生命周期的钩子\r\n * 4. 组件注册到ko对象上\r\n */\r\n\r\n import {IGenerate} from './igenerate';\r\n import {GenerateOption} from './generateOption';\r\n import {GenerateFactory} from './generateFactory'; \r\n import {EasyuiLoader} from './loader';\r\n import { CONSTKEY } from './utils';\r\n import { Components } from './kocomponents';\r\n\r\n\r\n /**\r\n  * 插件注册入口\r\n  * @param ko \r\n  */\r\n export function use(ko:KnockoutStatic){\r\n     let opt = new GenerateOption(ko);\r\n     let factory = new GenerateFactory(opt);\r\n     ko.components.loaders.unshift(new EasyuiLoader(factory));\r\n\r\n     \r\n    //ko-components\r\n    ko.components.register(`${CONSTKEY.CompPrefix}components`,{\r\n        viewModel:Components,\r\n        template:Components.getTemplate()\r\n    }); \r\n }\r\n\r\n export { getContextFor } from './generates';"],"names":["ko","jquery","$","type","CONSTKEY","compName","val","COMPTYPE","convertArgToArray","Array","prototype","slice","BaseComp","options","opt","viewModel","toJS","map","value","key","substring","isFunction","bind","_this2","this","createOptionsCore","createOptions","$dom","name","$parent","closest","CompPrefix","length","destroy","getTemplate","append","props","componentConfig","easyui","element","firstChild","_this","parent","context","contextFor","data","koContext","BaseEasyuiComp","keys","getMethodKeys","args","call","arguments","messager","apply","methodKeys","Object","getOwnPropertyNames","push","opts","extend","defaults","paint","params","bindMethods","that","unwrap","list","funClose","onClose","removeDialog","$key","dom","cleanNode","firstElementChild","remove","item","norm","bindContext","observableArray","methods","execute","extendBind","toLowerCase","isNumeric","index","methodName","unshift","sourceopts","changeEvent","isObservable","onChangeFn","onChange","newValue","oldValue","_latestValue","bindChangeEvent","resetComp","log","computedObservable","dispose","relation","depents","dependencies","findComp","noSupportDestroy","depCompName","componentName","argdeps","fn","result","m","deps","tmp","getDependNameOfComponent","d","join","indexOf","depHandler","$depDom","executes","DepCheckExecute","first","_touchMount","observableKeys","_getObservableKeys","computed","changeOpts","_getChangeObservable","_touchPaint","repaint","param","hasChanged","beforeMount","afterMount","action","beforePaint","afterPaint","option","eName","_getEventName","_extendOption","_orgEvent","childBindContext","removeNode","content","createChildContext","undefined","ctx","applyBindingsToDescendants","$data","eventName","DefaultGenerate","datagrid","columns","frozenColumns","_extendPanelEvent","plugins","pluginName","depret","concat","getDepend","depMethods","dep","arrays","hash","create","irow","elm","unique","components","register","EasyuiHelper","createEasyui","executeProvider","changeObs","reflows","panel","onOpen","linkbutton","unbind","parser","ExecuteProivder","ExtendBind","registerPlugins","generateHandler","generates","generate","EasyuiGenerate","EasyuiMessager","EasyuiDialogs","callback","templateConfig","viewModelConfig","$obj","$root","vm","activate","koDescendantsComplete","factory","compinfo","comp","each","comps","i","v","show","id","arg","isObj","toString","removeAll","paramComp","subscribe","nVal","compInfo","observable","domId","_setComp","GenerateOption","GenerateFactory","loaders","EasyuiLoader","Components"],"mappings":"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"}